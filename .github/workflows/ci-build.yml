name: CI

on:
  push:
  pull_request:
    branches:
      # Branches from forks have the form 'user:branch-name' so we only run
      # this job on pull_request events for branches that look like fork
      # branches. Without this we would end up running this job twice for non
      # forked PRs, once for the push and then once for opening the PR.
      - '**:**'

jobs:
  build:
    name: Build (Go ${{ matrix.go }}, OS ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        go: [ 1.14, 1.15 ]
        os: [ ubuntu-20.04, macos-latest, windows-latest ]
    env:
      GO111MODULE: on
    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Show versions
        run: go version

      - name: Install Go dependencies
        run: go mod download

      - name: Run golang tests on Windows (w/o codecov)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          go test -v -race -tags=debug ./tests/backoff
          go test -v -race -tags=debug ./tests/happy_scenarios
          go test -v -race -tags=debug ./tests/interfaces
          go test -v -race -tags=debug ./tests/issues
          go test -v -race -tags=debug ./tests/stress
          go test -v -race -tags=debug ./tests/disabled_vertices

      - name: Run golang tests
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          mkdir ./coverage-ci
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/backoff.txt -covermode=atomic ./tests/backoff
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/happy_scenarios.txt -covermode=atomic ./tests/happy_scenarios 
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/interfaces.txt -covermode=atomic ./tests/interfaces 
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/issues.txt -covermode=atomic ./tests/issues 
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/stress.txt -covermode=atomic ./tests/stress
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/disabled_vertices.txt -covermode=atomic ./tests/disabled_vertices 
          cat ./coverage-ci/*.txt > ./coverage-ci/summary.txt

      - uses: codecov/codecov-action@v1 # Docs: <https://github.com/codecov/codecov-action>
        if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-latest' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-ci/summary.txt
          fail_ci_if_error: false

  golangci-lint:
    name: Golang-CI (lint)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Run linter
        uses: golangci/golangci-lint-action@v2 # Action page: <https://github.com/golangci/golangci-lint-action>
        with:
          version: v1.34 # without patch version
          only-new-issues: false # show only new issues if it's a pull request
